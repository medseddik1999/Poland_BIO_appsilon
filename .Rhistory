) ,column(8 , box(h3('Poland Map') , leafletOutput(ns("map"))) , br(),
NoteInModu(ns('note_in')))
))
}
runApp('Sans titre.R')
runApp('Sans titre.R')
source("~/Desktop/Projets_Data/Biodiversity/ui_modules.R")
runApp('Sans titre.R')
runApp('Sans titre.R')
runApp('Sans titre.R')
runApp('Sans titre.R')
Mappageserver <- function(id) {
moduleServer(id, function(input, output, session) {
ns <- session$ns
# Function to generate options for the vernacular input
generateOptions2 <- function() {
options <- vernacularNames  # Replace with your logic
return(options)
}
# Function to generate options for the scientific input
generateOptions1 <- function() {
options <- scientificNames  # Replace with your logic
return(options)
}
# Observe event to update selectize inputs
observe({
updateSelectizeInput(session, "vernacularInput", choices = generateOptions2(), server = TRUE)
updateSelectizeInput(session, "scientificInput", choices = generateOptions1(), server = TRUE)
})
# Debounced input for vernacular input
debouncedVernacularInput <- debounce(reactive(input$vernacularInput), 1200)
# Observe event for updating scientific input based on vernacular input
observeEvent(debouncedVernacularInput(), {
selectedVernacular <- debouncedVernacularInput()
scientificChoices <- scientificNames[vernacularNames %in% selectedVernacular]
updateSelectizeInput(session, "scientificInput", selected = scientificChoices)
})
# Debounced input for scientific input
debouncedScientificInput <- debounce(reactive(input$scientificInput), 1200)
# Observe event for updating vernacular input based on scientific input
observeEvent(debouncedScientificInput(), {
selectedScientific <- debouncedScientificInput()
vernacularChoices <- vernacularNames[scientificNames %in% selectedScientific]
updateSelectizeInput(session, "vernacularInput", selected = vernacularChoices)
})
# Debounced map data
map_data <- debounce(
reactive(
if (!is.null(input$scientificInput)) {
names_filter(input$scientificInput, data)
} else {
names_filter(c('Acrocephalus paludicola', 'Propylea quatuordecimpunctata'), data)
}
),
30
)
# Render the leaflet map
output$map <- renderLeaflet({
map_names(map_data())
})
# Render the Echarts timeline
output$sptime <- renderEcharts4r({
names_timline(map_data())
})
# Call server functions for note modules
NoteInModuServer('note_in')
NoteOutModuleServer('note_out')
})
}
generateOptions2 <- function() {
options <- vernacularNames
return(options)
}
# Function to generate options for the scientific input
generateOptions1 <- function() {
options <- scientificNames
return(options)
}
runApp('Sans titre.R')
source("~/Desktop/Projets_Data/Biodiversity/ui_modules.R")
runApp('Sans titre.R')
source("~/Desktop/Projets_Data/Biodiversity/ui_modules.R")
runApp('Sans titre.R')
NoteOutModuleServer <- function(id , sessioon) {
moduleServer(id , function(input, output , session){
files <- reactive({
cleanNoteList('Notes_bio')
})
# Update choices in the selectizeInput
observe({
updateSelectizeInput(session, 'notesSel', choices = files(), server = TRUE)
})
# Render the selected note content
observeEvent(input$notesSel, {
output$notes_sel <- renderText({
selected_note <- input$notesSel
# Check if a note is selected
if (!is.null(selected_note)) {
note_content <- readLines(paste0("Notes_bio/", selected_note, ".txt"))
paste(note_content, collapse = '\n')
} else {
# If no note is selected, display a default message or handle it as needed
"Select a note to see its content."
}
})
})
})
# Reactive expression for reading note files
}
source("~/Desktop/Projets_Data/Biodiversity/ui_modules.R")
runApp('Sans titre.R')
source("~/Desktop/Projets_Data/Biodiversity/ui_modules.R")
runApp('Sans titre.R')
source("~/Desktop/Projets_Data/Biodiversity/ui_modules.R")
runApp('Sans titre.R')
vernacularNames <- dt$vernacularName
scientificNames <- dt$scientificName
runApp('Sans titre.R')
install.packages("shinytest2")
library(shinytest2)
record_test()
record_test()
library(shinytest)
install.packages("shinytest")
library(shinytest)
shinytest::installDependencies()
library(shinytest)
test_that("Chart Update Test", {
# Create a test app
app <- ShinyDriver$new("app.R")
app$navigate("Overview")
expect_element_to_exist(app, "#piechart")
initial_chart_content <- app$evaluate_js("getOption('echarts4r_option')")
# Change the metric input
app$selectInput("metric", "Species")
# Add a brief delay to allow the chart to update (adjust as needed)
Sys.sleep(2)
# Test: Check if the pie chart updates after changing the metric input
updated_chart_content <- app$evaluate_js("getOption('echarts4r_option')")
# You might need to customize the method to retrieve the updated chart content
# Validate if the chart content has changed
expect_not_equal(initial_chart_content, updated_chart_content)
# Close the app
app$stop()
})
runApp()
library(shinytest)
test_that("Chart Update Test", {
# Create a test app
app <- ShinyDriver$new("app.R")
app$navigate("Overview")
expect_element_to_exist(app, "#piechart")
initial_chart_content <- app$evaluate_js("getOption('echarts4r_option')")
# Change the metric input
app$selectInput("metric", "Species")
# Add a brief delay to allow the chart to update (adjust as needed)
Sys.sleep(2)
# Test: Check if the pie chart updates after changing the metric input
updated_chart_content <- app$evaluate_js("getOption('echarts4r_option')")
# You might need to customize the method to retrieve the updated chart content
# Validate if the chart content has changed
expect_not_equal(initial_chart_content, updated_chart_content)
# Close the app
app$stop()
})
test_that("Chart Update Test", {
# Create a test app
app <- ShinyDriver$new("app.R")
app$navigate("Overview")
expect_element_to_exist(app, "#piechart")
initial_chart_content <- app$evaluate_js("getOption('echarts4r_option')")
# Change the metric input
app$selectInput("metric", "Species")
# Add a brief delay to allow the chart to update (adjust as needed)
Sys.sleep(2)
# Test: Check if the pie chart updates after changing the metric input
updated_chart_content <- app$evaluate_js("getOption('echarts4r_option')")
# You might need to customize the method to retrieve the updated chart content
# Validate if the chart content has changed
expect_not_equal(initial_chart_content, updated_chart_content)
# Close the app
app$stop()
})
runApp()
library(shinytest)
test_that("Chart Update Test", {
# Create a test app
app <- ShinyDriver$new("app.R")
app$navigate("Overview")
expect_element_to_exist(app, "#piechart")
initial_chart_content <- app$evaluate_js("getOption('echarts4r_option')")
# Change the metric input
app$selectInput("metric", "Species")
# Add a brief delay to allow the chart to update (adjust as needed)
Sys.sleep(2)
# Test: Check if the pie chart updates after changing the metric input
updated_chart_content <- app$evaluate_js("getOption('echarts4r_option')")
# You might need to customize the method to retrieve the updated chart content
# Validate if the chart content has changed
expect_not_equal(initial_chart_content, updated_chart_content)
# Close the app
app$stop()
})
shinyAppTemplate()
shinyAppTemplate('')
shinyAppTemplate('/Users/midou/Desktop/Projets_Data/Biodiversity')
shinytest2::test_app()
source("app.R")
data==data
all(data)==all(data)
all.equal(data, data)
View(dt)
dori1 |>
group_by(scientificName) |>
e_charts(eventDate, name = 'Date') |>
e_line(NumberOfobservation) |>
e_tooltip(trigger = 'axis') |>
e_axis(
name = 'Date'  # X-axis label
) |>
e_y_axis(name = 'Number of Observations')
dori1 <- dori %>%
group_by(eventDate, scientificName) %>%
summarise(NumberOfobservation = n(), countIndividu = sum(individualCount))
date_data=data %>% group_by(eventDate) %>% summarise(observations=n() , species=n_distinct(scientificName))
date_data |>
e_charts(eventDate) |>
e_line(observations) |>
e_line(species) |>
e_datazoom(type = "slider")  |> e_theme("macarons2")
p=date_data |>
e_charts(eventDate) |>
e_line(observations) |>
e_line(species) |>
e_datazoom(type = "slider")  |> e_theme("macarons2")
class(p)
context("Functions testing")
library(testthat)
source("app.R")
test_that("Filter by scientificNam ", {
# Call the function to create a Leaflet map
data1 <-names_filter('Cygnus olor' , data)
# Check if the result is a Leaflet map object
expect_true(unique(data1$scientificName) == 'Cygnus olor' )
expect_true(unique(data$vernacularName) == 'Mute Swan')
})
install.packages("here")
clean_title('545RIC')
testServer(server, {
cat("Initially, input$x is NULL, right?", is.null(input$x), "\n")
# Give input$x a value.
session$setInputs(x = 1)
cat("Now that x is set to 1, myreactive is: ", myreactive(), "\n")
cat("\tand output$txt is: ", output$txt, "\n")
# Now update input$x to a new value
session$setInputs(x = 2)
cat("After updating x to 2, myreactive is: ", myreactive(), "\n")
cat("\tand output$txt is: ", output$txt, "\n")
})
View(data)
dota=data %>% filter(polish_provinces_eng)
dota=data %>% filter(polish_provinces_eng=='Podlaskie Voivodeship')
length(dota$scientificName)
testServer(HomepageModuServer , {
session$setInputs(province = 'Podlaskie Voivodeship')
expect_equal( length(data2()) , 22418)
})
testServer(HomepageModuServer , {
session$setInputs(province = 'Podlaskie Voivodeship')
expect_equal(dim(data2())[2] , 22418)
})
length(unique(dota$scientificName))
testServer(HomepageModuServer , {
session$setInputs(province = 'Podlaskie Voivodeship')
d<-length(unique(data2()$scientificName))
expect_true(d , 981)
})
testServer(HomepageModuServer , {
session$setInputs(province = 'Podlaskie Voivodeship')
d<-length(unique(data2()$scientificName))
expect_true(d == 981)
})
context("Server Testing")
testServer(HomepageModuServer , {
session$setInputs(province = 'Podlaskie Voivodeship')
d<-length(unique(data2()$scientificName))
expect_true(d == 981)
})
testServer(HomepageModuServer , {
session$setInputs(province = 'Podlaskie Voivodeship')
d<-length(unique(data2()$scientificName))
expect_true(d == 981)
})
testServer(HomepageModuServer , {
session$setInputs(province = 'Podlaskie Voivodeship')
d<-length(unique(data2()$scientificName))
expect_true(d == 981)
})
runTests()
length(unique(data$scientificName))
runTests()
runTests()
context("Server Testing")
testServer(HomepageModuServer, {
session$setInputs(province = 'Podlaskie Voivodeship')
d <- length(unique(data2()$scientificName))
expect_true(d == 981)
})
testServer(HomepageModuServer, {
session$setInputs(province = 'All')
d <- length(unique(data2()$scientificName))
expect_true(d == 1508)
})
runTests()
runTests()
runApp()
runApp()
devtools::test_coverage_file()
usethis::use_test()
usethis::use_test()
runTests()
runTests()
runTests()
library(testthat)
library(Biodiversity)
test_check("Biodiversity")
test_check()
shinyAppTemplate()
shinyAppTemplate('/Users/midou/Desktop/Projets_Data/Biodiversity')
runTests()
shinytest2::test_app()
runTests()
runTests()
runTests()
runTests()
source(file.path("..", "data_setup.R"), chdir = TRUE)
source(file.path("..", "data_setup.R"), chdir = TRUE)
file.exists("../data_setup.R")
source("~/Desktop/Projets_Data/Biodiversity/data_setup.R")
source(file.path("..", "data_setup.R"), chdir = TRUE)
runTests()
runTests()
runTests()
context("Server Testing")
testServer(HomepageModuServer , {
session$setInputs(province = 'Podlaskie Voivodeship')
d<-length(unique(data2()$scientificName))
expect_true(d == 981)
})
testServer(HomepageModuServer , {
session$setInputs(province = 'All')
d<-length(unique(data2()$scientificName))
expect_true(d == 1508)
})
testServer(HomepageModuServer , {
session$setInputs(province = 'All')
d<-length(unique(data2()$scientificName))
expect_true(d == 1508)
})
library(shinytest)
shinytest::recordTest()
library(shinytest)
shinytest::recordTest()
rlang::last_trace()
runTests()
runTests()
runTests()
runTests()
View(dota)
runTests()
runTests()
runTests()
runTests()
runTests()
runTests()
runTests()
runTests()
runTests()
runTests()
runTests()
runTests()
runTests()
runTests()
runTests()
test_that("Test updating scientificInput based on vernacular input", {
testServer(Mappageserver, {
# Set initial values
session$setInputs(vernacularInput = c('Alder Leaf Beetle'))
# Trigger the debouncedVernacularInput observeEvent
shinytest::delayedUnit(1.2, "s")
session$setInputs(vernacularInput = c('Adonis Blue'))
# Check the resulting value of scientificInput
expect_equal(input$scientificInput, c('Lysandra bellargus'))
})
})
test_that("Test updating scientificInput based on vernacular input", {
testServer(Mappageserver, {
# Set initial values
session$setInputs(vernacularInput = c('Alder Leaf Beetle'))
shinytest::interact("vernacularInput", value = 'Adonis Blue', session = session)
# Check the resulting value of scientificInput
expect_equal(input$scientificInput, c('Lysandra bellargus'))
})
})
test_that("Test updating scientificInput based on vernacular input", {
testServer(Mappageserver, {
# Set initial values
session$setInputs(vernacularInput = c('Adonis Blue'))
# Check the resulting value of scientificInput
expect_equal(scientificInput, c('Lysandra bellargus'))
})
})
test_that("Test updating scientificInput based on vernacular input", {
testServer(Mappageserver, {
# Set initial values
session$setInputs(vernacularInput = c('Adonis Blue'))
# Check the resulting value of scientificInput
expect_equal(input$scientificInput, c('Lysandra bellargus'))
})
})
runApp()
test_that("automatically switches to other",{
app <- ShinyDriver$new(shinyApp(ui, server))
app$navigateTo("shiny-tab-Map")
app$setValue("vernacularInput", "Adonis Blue")
app$waitForSelector("#scientificInput", timeout = 1500)
expect_equal(app$getValue("scientificInput"), c('Lysandra bellargus'))
})
app <- ShinyDriver$new(shinyApp(ui, server))
app <- ShinyDriver$new(shinyApp(ui, server))
app <- ShinyDriver$new('app.R')
rlang::last_trace()
rm(dt)
app <- ShinyDriver$new('app.R')
test_that("automatically switches to other",{
app <- ShinyDriver$new('app.R')
app$setValue("vernacularInput", "Adonis Blue")
app$waitForSelector("#scientificInput", timeout = 1500)
expect_equal(app$getValue("scientificInput"), c('Lysandra bellargus'))
})
test_that("automatically switches to other",{
app <- ShinyDriver$new('app.R')
app$setValue("vernacularInput", "Adonis Blue")
app$waitForSelector("#scientificInput", timeout = 1500)
expect_equal(app$getValue("scientificInput"), c('Lysandra bellargus'))
})
test_that("automatically switches to other", {
app <- ShinyDriver$new('app.R')
app$setValue("vernacularInput", "Adonis Blue")
app$waitForSelector("#scientificInput", timeout = 1500)
# Use () to access the value of the reactive expression
expect_equal(app$getValue("scientificInput"), c('Lysandra bellargus'))
})
runApp()
test_that("automatically switches to other", {
app <- ShinyDriver$new('app.R', port=5319)
app$navigateTo("shiny-tab-Map")
app$setValue("vernacularInput", "Adonis Blue")
app$waitForSelector("#scientificInput", timeout = 1500)
# Use () to access the value of the reactive expression
expect_equal(app$getValue("scientificInput"), c('Lysandra bellargus'))
})
test_that("automatically switches to other", {
app <- ShinyDriver$new('app.R')
app$navigateTo("shiny-tab-Map")
app$setValue("vernacularInput", "Adonis Blue")
app$waitForSelector("#scientificInput", timeout = 1500)
# Use () to access the value of the reactive expression
expect_equal(app$getValue("scientificInput"), c('Lysandra bellargus'))
})
shinytest::recordTest()
shinytest::recordTest()
shinytest::recordTest()
shinytest::recordTest()
testApp("myshinyapp", "mytest")
testApp("app", "mytest")
testApp("myshinyapp", "mytest")
testApp('app.R' ,"mytest" )
testApp('/Users/midou/Desktop/Projets_Data/Biodiversity/app.R' ,"mytest" )
testApp('/Users/midou/Desktop/Projets_Data/Biodiversity/' ,"mytest" )
print_directory_structure <- function(path = ".", indent = 0) {
files <- list.files(path, full.names = TRUE)
for (file in files) {
cat(rep("  ", indent))
cat(file, "\n")
if (file.info(file)$isdir) {
print_directory_structure(file, indent + 1)
}
}
}
print_directory_structure()
detach("package:shiny", unload = TRUE)
print_directory_structure <- function(path = ".", indent = 0) {
files <- list.files(path, full.names = TRUE)
for (file in files) {
cat(rep("  ", indent))
cat(file, "\n")
if (file.info(file)$isdir) {
print_directory_structure(file, indent + 1)
}
}
}
print_directory_structure()
shiny::runApp()
runApp()
runApp()
runApp()
options(shiny.custom.semantic = "styles/")
runApp()
runApp()
runApp()
runApp()
